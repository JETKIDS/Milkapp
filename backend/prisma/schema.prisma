generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Customer {
  id               Int       @id @default(autoincrement())
  name             String
  address          String
  phone            String?
  collectionMethod String?
  bankBranchCode7  String?
  accountNumber7   String?
  accountHolderKana String?
  customerCode7    String?
  email            String?
  deliveryCourseId Int?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  deliveryCourse   DeliveryCourse? @relation(fields: [deliveryCourseId], references: [id])
  orders           Order[]
  schedules        DeliverySchedule[]
  deliveryRecords  DeliveryRecord[]
  contracts        CustomerProductContract[]
  invoiceHistories InvoiceHistory[]
  coursePositions  CustomerCoursePosition[]
  temporaryDeliveries TemporaryDelivery[]
}


model Manufacturer {
  id          Int       @id @default(autoincrement())
  name        String
  contactInfo String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Product {
  id             Int          @id @default(autoincrement())
  name           String
  manufacturerId Int
  price          Int
  unit           String
  description    String?
  stock          Int          @default(99999)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  orders         Order[]
  contracts      CustomerProductContract[]
  temporaryDeliveries TemporaryDelivery[]
}

model DeliveryCourse {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  customers   Customer[]
  coursePositions CustomerCoursePosition[]
}

model Order {
  id          Int       @id @default(autoincrement())
  customerId  Int
  productId   Int
  quantity    Int
  unitPrice   Int
  totalPrice  Int
  orderDate   DateTime
  deliveryDate DateTime?
  status      String    @default("pending")
  createdAt   DateTime  @default(now())

  customer    Customer  @relation(fields: [customerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  records     DeliveryRecord[]
}

model DeliverySchedule {
  id          Int       @id @default(autoincrement())
  customerId  Int
  dayOfWeek   Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  customer    Customer  @relation(fields: [customerId], references: [id])
}

model DeliveryRecord {
  id           Int       @id @default(autoincrement())
  orderId      Int?
  customerId   Int
  deliveryDate DateTime
  status       String
  notes        String?
  createdAt    DateTime  @default(now())

  order        Order?    @relation(fields: [orderId], references: [id])
  customer     Customer  @relation(fields: [customerId], references: [id])
}

model InvoiceHistory {
  id                Int      @id @default(autoincrement())
  customerId        Int
  invoicePeriodStart DateTime
  invoicePeriodEnd   DateTime
  totalAmount       Int
  issuedDate        DateTime
  createdAt         DateTime @default(now())

  customer          Customer @relation(fields: [customerId], references: [id])
}

model CustomerCoursePosition {
  id               Int       @id @default(autoincrement())
  customerId       Int
  deliveryCourseId Int
  position         Int
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  customer         Customer  @relation(fields: [customerId], references: [id])
  deliveryCourse   DeliveryCourse @relation(fields: [deliveryCourseId], references: [id])

  @@unique([customerId, deliveryCourseId])
}

model CustomerProductContract {
  id          Int       @id @default(autoincrement())
  customerId  Int
  productId   Int
  unitPrice   Int       @default(0)
  patternType String    @default("1")
  isActive    Boolean   @default(true)
  startDate   DateTime
  endDate     DateTime?
  cancelDate  DateTime? // 解約日
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  customer    Customer  @relation(fields: [customerId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])
  patterns    DeliveryPattern[]
  pauses      ContractPause[]
  patternChanges PatternChangeHistory[]
}

model DeliveryPattern {
  id          Int       @id @default(autoincrement())
  contractId  Int
  dayOfWeek   Int
  quantity    Int
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  contract    CustomerProductContract @relation(fields: [contractId], references: [id])
}

model ContractPause {
  id         Int      @id @default(autoincrement())
  contractId Int
  startDate  DateTime
  endDate    DateTime
  createdAt  DateTime @default(now())

  contract   CustomerProductContract @relation(fields: [contractId], references: [id])
}

model PatternChangeHistory {
  id          Int       @id @default(autoincrement())
  contractId  Int
  changeDate  DateTime  // パターン変更が適用される日付
  patterns    String    // JSON形式で曜日別数量を保存 {"0": 2, "1": 3, "2": 0, ...}
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  contract    CustomerProductContract @relation(fields: [contractId], references: [id])
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TemporaryDelivery {
  id          Int      @id @default(autoincrement())
  customerId  Int
  productId   Int
  deliveryDate DateTime
  quantity    Int
  unitPrice   Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
}

